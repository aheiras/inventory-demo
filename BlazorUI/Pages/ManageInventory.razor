@page "/inventorymanagement"
@page "/inventorymanagement/{Id:int}"
@inject NavigationManager Navigation;
@inject IInventoryService inventoryService;

@using BlazorUI.Services;
@using MatBlazor

<h3>Crear/Editar Productos</h3>

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell"></div>
        <div class="mat-layout-grid-cell-span-6">
            <MatCard>
                <MatCardContent>
                    <br>
                    <br>
                    <br>
                    <h3>Datos del Producto</h3>
                    <MatTextField Label="Sku" @bind-Value="@sku"></MatTextField>
                    <MatTextField Label="Nombre de producto" @bind-Value="@productName"></MatTextField>
                    <MatTextField Label="Valor" @bind-Value="@value"></MatTextField>
                </MatCardContent>
                <MatCardActions>
                    <MatButton OnClick="@Cancel_OnClick">Cancelar</MatButton>
                    <MatButton OnClick="@Accept_OnClick">Aceptar</MatButton>
                </MatCardActions>
            </MatCard>
        </div>
        <div class="mat-layout-grid-cell"></div>
    </div>
</div>

<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>@title</MatDialogTitle>
    <MatDialogContent>
        <p>@message</p>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => {
                            dialogIsOpen = false;
                            if(title != "Error")
                            {
                                Cancel_OnClick();
                            }
                        })">Aceptar</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    [Parameter]
    public int? Id { get; set; }

    private string productName;
    private string sku;
    private string value;
    private bool dialogIsOpen = false;
    private string title;
    private string message;

    [CascadingParameter]
    public LoggedUser loggedUser { get; set; }

    private async void Accept_OnClick()
    {

        // Perform login logic here
        // For simplicity, let's assume it's successful if the username and password are not empty
        if (!string.IsNullOrEmpty(sku) && !string.IsNullOrEmpty(productName) && !string.IsNullOrEmpty(value))
        {
            if (Id != null && Id != 0)
            {
                var currentProduct = await inventoryService.GetInventoryByIdAsync(Id.Value);
                var updated = await inventoryService.UpdateProductAsync(Id.Value, currentProduct.Product);
                if (updated)
                {
                    title = "Éxito";
                    message = "El producto se ha actualizado con éxito";
                    dialogIsOpen = true;
                }
                else
                {
                    title = "Error";
                    message = "Verifique los datos, ha ocurrido un error";
                    dialogIsOpen = true;
                }
            }
            else
            {
                var created = await inventoryService.CreateProductAsync(new Domain.Entities.Product
                    {
                        ProductName = productName,
                        Sku = sku,
                        Value = value
                    });
                if (created != null)
                {
                    title = "Éxito";
                    message = "El producto se ha creado con éxito";
                    dialogIsOpen = true;
                }
                else
                {
                    title = "Error";
                    message = "Verifique los datos, ha ocurrido un error";
                    dialogIsOpen = true;
                }
            }

        }
        else
        {
            title = "Error";
            message = "Verifique los datos, hay campos vacios";
            dialogIsOpen = true;
            dialogIsOpen = true;
        }
    }

    private void Cancel_OnClick()
    {
        Navigation.NavigateTo("/inventory");
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id != null && Id != 0)
        {
            var currentProd = await inventoryService.GetInventoryByIdAsync(Id.Value);
            if (currentProd != null)
            {
                sku = currentProd.Product.Sku;
                productName = currentProd.Product.ProductName;
                value = currentProd.Product.Value;
            }
            else
            {
                Navigation.NavigateTo("/inventorymanagement");
            }
        }
    }
}
